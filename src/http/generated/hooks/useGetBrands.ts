/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetBrandsQueryResponse, GetBrandsQueryParams } from '../types/GetBrands.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getBrandsQueryKey = (params?: GetBrandsQueryParams) => [{ url: '/brands' }, ...(params ? [params] : [])] as const

export type GetBrandsQueryKey = ReturnType<typeof getBrandsQueryKey>

/**
 * @summary Get brands
 * {@link /brands}
 */
export async function getBrands(params?: GetBrandsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetBrandsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/brands`,
    baseURL: 'http://localhost:3333',
    params,
    ...requestConfig,
  })
  return res.data
}

export function getBrandsQueryOptions(params?: GetBrandsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getBrandsQueryKey(params)
  return queryOptions<GetBrandsQueryResponse, ResponseErrorConfig<Error>, GetBrandsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getBrands(params, config)
    },
  })
}

/**
 * @summary Get brands
 * {@link /brands}
 */
export function useGetBrands<TData = GetBrandsQueryResponse, TQueryData = GetBrandsQueryResponse, TQueryKey extends QueryKey = GetBrandsQueryKey>(
  params?: GetBrandsQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<GetBrandsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getBrandsQueryKey(params)

  const query = useQuery(
    {
      ...getBrandsQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}