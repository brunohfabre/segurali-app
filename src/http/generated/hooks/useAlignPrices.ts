/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { AlignPricesMutationRequest, AlignPricesMutationResponse, AlignPricesPathParams } from '../types/AlignPrices.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const alignPricesMutationKey = () => [{ url: '/quotes/:quoteId/prices/align' }] as const

export type AlignPricesMutationKey = ReturnType<typeof alignPricesMutationKey>

/**
 * @summary Align prices
 * {@link /quotes/:quoteId/prices/align}
 */
export async function alignPrices(
  quoteId: AlignPricesPathParams['quoteId'],
  data: AlignPricesMutationRequest,
  config: Partial<RequestConfig<AlignPricesMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<AlignPricesMutationResponse, ResponseErrorConfig<Error>, AlignPricesMutationRequest>({
    method: 'POST',
    url: `/quotes/${quoteId}/prices/align`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Align prices
 * {@link /quotes/:quoteId/prices/align}
 */
export function useAlignPrices<TContext>(
  options: {
    mutation?: UseMutationOptions<
      AlignPricesMutationResponse,
      ResponseErrorConfig<Error>,
      { quoteId: AlignPricesPathParams['quoteId']; data: AlignPricesMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<AlignPricesMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? alignPricesMutationKey()

  return useMutation<
    AlignPricesMutationResponse,
    ResponseErrorConfig<Error>,
    { quoteId: AlignPricesPathParams['quoteId']; data: AlignPricesMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ quoteId, data }) => {
        return alignPrices(quoteId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}