/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { AiVectorMutationResponse } from '../types/AiVector.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const aiVectorMutationKey = () => [{ url: '/ai/vector' }] as const

export type AiVectorMutationKey = ReturnType<typeof aiVectorMutationKey>

/**
 * @summary AI vector
 * {@link /ai/vector}
 */
export async function aiVector(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<AiVectorMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/ai/vector`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary AI vector
 * {@link /ai/vector}
 */
export function useAiVector<TContext>(
  options: {
    mutation?: UseMutationOptions<AiVectorMutationResponse, ResponseErrorConfig<Error>, void, TContext> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? aiVectorMutationKey()

  return useMutation<AiVectorMutationResponse, ResponseErrorConfig<Error>, void, TContext>(
    {
      mutationFn: async () => {
        return aiVector(config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}