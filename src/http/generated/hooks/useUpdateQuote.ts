/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { UpdateQuoteMutationRequest, UpdateQuoteMutationResponse, UpdateQuotePathParams } from '../types/UpdateQuote.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const updateQuoteMutationKey = () => [{ url: '/quotes/:quoteId' }] as const

export type UpdateQuoteMutationKey = ReturnType<typeof updateQuoteMutationKey>

/**
 * @summary Update quote
 * {@link /quotes/:quoteId}
 */
export async function updateQuote(
  quoteId: UpdateQuotePathParams['quoteId'],
  data?: UpdateQuoteMutationRequest,
  config: Partial<RequestConfig<UpdateQuoteMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<UpdateQuoteMutationResponse, ResponseErrorConfig<Error>, UpdateQuoteMutationRequest>({
    method: 'PUT',
    url: `/quotes/${quoteId}`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Update quote
 * {@link /quotes/:quoteId}
 */
export function useUpdateQuote<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateQuoteMutationResponse,
      ResponseErrorConfig<Error>,
      { quoteId: UpdateQuotePathParams['quoteId']; data?: UpdateQuoteMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateQuoteMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateQuoteMutationKey()

  return useMutation<
    UpdateQuoteMutationResponse,
    ResponseErrorConfig<Error>,
    { quoteId: UpdateQuotePathParams['quoteId']; data?: UpdateQuoteMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ quoteId, data }) => {
        return updateQuote(quoteId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}