/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetPricesQueryResponse, GetPricesPathParams } from '../types/GetPrices.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getPricesSuspenseQueryKey = (quoteId: GetPricesPathParams['quoteId']) =>
  [{ url: '/quotes/:quoteId/prices', params: { quoteId: quoteId } }] as const

export type GetPricesSuspenseQueryKey = ReturnType<typeof getPricesSuspenseQueryKey>

/**
 * @summary Get prices
 * {@link /quotes/:quoteId/prices}
 */
export async function getPricesSuspense(quoteId: GetPricesPathParams['quoteId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetPricesQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/quotes/${quoteId}/prices`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getPricesSuspenseQueryOptions(quoteId: GetPricesPathParams['quoteId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getPricesSuspenseQueryKey(quoteId)
  return queryOptions<GetPricesQueryResponse, ResponseErrorConfig<Error>, GetPricesQueryResponse, typeof queryKey>({
    enabled: !!quoteId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getPricesSuspense(quoteId, config)
    },
  })
}

/**
 * @summary Get prices
 * {@link /quotes/:quoteId/prices}
 */
export function useGetPricesSuspense<TData = GetPricesQueryResponse, TQueryKey extends QueryKey = GetPricesSuspenseQueryKey>(
  quoteId: GetPricesPathParams['quoteId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetPricesQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getPricesSuspenseQueryKey(quoteId)

  const query = useSuspenseQuery(
    {
      ...getPricesSuspenseQueryOptions(quoteId, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}