/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetVehicleFromChassisQueryResponse, GetVehicleFromChassisPathParams } from '../types/GetVehicleFromChassis.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getVehicleFromChassisQueryKey = (chassis: GetVehicleFromChassisPathParams['chassis']) =>
  [{ url: '/vehicles/chassis/:chassis', params: { chassis: chassis } }] as const

export type GetVehicleFromChassisQueryKey = ReturnType<typeof getVehicleFromChassisQueryKey>

/**
 * @summary Get vehicle from chassis
 * {@link /vehicles/chassis/:chassis}
 */
export async function getVehicleFromChassis(
  chassis: GetVehicleFromChassisPathParams['chassis'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetVehicleFromChassisQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/vehicles/chassis/${chassis}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getVehicleFromChassisQueryOptions(
  chassis: GetVehicleFromChassisPathParams['chassis'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getVehicleFromChassisQueryKey(chassis)
  return queryOptions<GetVehicleFromChassisQueryResponse, ResponseErrorConfig<Error>, GetVehicleFromChassisQueryResponse, typeof queryKey>({
    enabled: !!chassis,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getVehicleFromChassis(chassis, config)
    },
  })
}

/**
 * @summary Get vehicle from chassis
 * {@link /vehicles/chassis/:chassis}
 */
export function useGetVehicleFromChassis<
  TData = GetVehicleFromChassisQueryResponse,
  TQueryData = GetVehicleFromChassisQueryResponse,
  TQueryKey extends QueryKey = GetVehicleFromChassisQueryKey,
>(
  chassis: GetVehicleFromChassisPathParams['chassis'],
  options: {
    query?: Partial<QueryObserverOptions<GetVehicleFromChassisQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getVehicleFromChassisQueryKey(chassis)

  const query = useQuery(
    {
      ...getVehicleFromChassisQueryOptions(chassis, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}