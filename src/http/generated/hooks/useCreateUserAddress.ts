/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateUserAddressMutationRequest, CreateUserAddressMutationResponse, CreateUserAddressPathParams } from '../types/CreateUserAddress.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const createUserAddressMutationKey = () => [{ url: '/users/:userId/addresses' }] as const

export type CreateUserAddressMutationKey = ReturnType<typeof createUserAddressMutationKey>

/**
 * @summary Create user address
 * {@link /users/:userId/addresses}
 */
export async function createUserAddress(
  userId: CreateUserAddressPathParams['userId'],
  data: CreateUserAddressMutationRequest,
  config: Partial<RequestConfig<CreateUserAddressMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<CreateUserAddressMutationResponse, ResponseErrorConfig<Error>, CreateUserAddressMutationRequest>({
    method: 'POST',
    url: `/users/${userId}/addresses`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Create user address
 * {@link /users/:userId/addresses}
 */
export function useCreateUserAddress<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateUserAddressMutationResponse,
      ResponseErrorConfig<Error>,
      { userId: CreateUserAddressPathParams['userId']; data: CreateUserAddressMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateUserAddressMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createUserAddressMutationKey()

  return useMutation<
    CreateUserAddressMutationResponse,
    ResponseErrorConfig<Error>,
    { userId: CreateUserAddressPathParams['userId']; data: CreateUserAddressMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ userId, data }) => {
        return createUserAddress(userId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}