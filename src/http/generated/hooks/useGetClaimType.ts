/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetClaimTypeQueryResponse, GetClaimTypePathParams } from '../types/GetClaimType.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getClaimTypeQueryKey = (claimTypeId: GetClaimTypePathParams['claimTypeId']) =>
  [{ url: '/claim-types/:claimTypeId', params: { claimTypeId: claimTypeId } }] as const

export type GetClaimTypeQueryKey = ReturnType<typeof getClaimTypeQueryKey>

/**
 * @summary Get claim type
 * {@link /claim-types/:claimTypeId}
 */
export async function getClaimType(claimTypeId: GetClaimTypePathParams['claimTypeId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetClaimTypeQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/claim-types/${claimTypeId}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getClaimTypeQueryOptions(claimTypeId: GetClaimTypePathParams['claimTypeId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getClaimTypeQueryKey(claimTypeId)
  return queryOptions<GetClaimTypeQueryResponse, ResponseErrorConfig<Error>, GetClaimTypeQueryResponse, typeof queryKey>({
    enabled: !!claimTypeId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getClaimType(claimTypeId, config)
    },
  })
}

/**
 * @summary Get claim type
 * {@link /claim-types/:claimTypeId}
 */
export function useGetClaimType<TData = GetClaimTypeQueryResponse, TQueryData = GetClaimTypeQueryResponse, TQueryKey extends QueryKey = GetClaimTypeQueryKey>(
  claimTypeId: GetClaimTypePathParams['claimTypeId'],
  options: {
    query?: Partial<QueryObserverOptions<GetClaimTypeQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getClaimTypeQueryKey(claimTypeId)

  const query = useQuery(
    {
      ...getClaimTypeQueryOptions(claimTypeId, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}