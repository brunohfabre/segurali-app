/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  CreateProposalPreInspectionMutationRequest,
  CreateProposalPreInspectionMutationResponse,
  CreateProposalPreInspectionPathParams,
} from '../types/CreateProposalPreInspection.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const createProposalPreInspectionMutationKey = () => [{ url: '/proposals/:proposalId/pre-inspection' }] as const

export type CreateProposalPreInspectionMutationKey = ReturnType<typeof createProposalPreInspectionMutationKey>

/**
 * @summary Create proposal pre inspection
 * {@link /proposals/:proposalId/pre-inspection}
 */
export async function createProposalPreInspection(
  proposalId: CreateProposalPreInspectionPathParams['proposalId'],
  data: CreateProposalPreInspectionMutationRequest,
  config: Partial<RequestConfig<CreateProposalPreInspectionMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<CreateProposalPreInspectionMutationResponse, ResponseErrorConfig<Error>, CreateProposalPreInspectionMutationRequest>({
    method: 'POST',
    url: `/proposals/${proposalId}/pre-inspection`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Create proposal pre inspection
 * {@link /proposals/:proposalId/pre-inspection}
 */
export function useCreateProposalPreInspection<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateProposalPreInspectionMutationResponse,
      ResponseErrorConfig<Error>,
      { proposalId: CreateProposalPreInspectionPathParams['proposalId']; data: CreateProposalPreInspectionMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateProposalPreInspectionMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createProposalPreInspectionMutationKey()

  return useMutation<
    CreateProposalPreInspectionMutationResponse,
    ResponseErrorConfig<Error>,
    { proposalId: CreateProposalPreInspectionPathParams['proposalId']; data: CreateProposalPreInspectionMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ proposalId, data }) => {
        return createProposalPreInspection(proposalId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}