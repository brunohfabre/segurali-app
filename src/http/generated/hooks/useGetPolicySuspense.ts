/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetPolicyQueryResponse, GetPolicyPathParams } from '../types/GetPolicy.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getPolicySuspenseQueryKey = (policyId: GetPolicyPathParams['policyId']) =>
  [{ url: '/policies/:policyId', params: { policyId: policyId } }] as const

export type GetPolicySuspenseQueryKey = ReturnType<typeof getPolicySuspenseQueryKey>

/**
 * @summary Get policy
 * {@link /policies/:policyId}
 */
export async function getPolicySuspense(policyId: GetPolicyPathParams['policyId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetPolicyQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/policies/${policyId}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getPolicySuspenseQueryOptions(policyId: GetPolicyPathParams['policyId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getPolicySuspenseQueryKey(policyId)
  return queryOptions<GetPolicyQueryResponse, ResponseErrorConfig<Error>, GetPolicyQueryResponse, typeof queryKey>({
    enabled: !!policyId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getPolicySuspense(policyId, config)
    },
  })
}

/**
 * @summary Get policy
 * {@link /policies/:policyId}
 */
export function useGetPolicySuspense<TData = GetPolicyQueryResponse, TQueryKey extends QueryKey = GetPolicySuspenseQueryKey>(
  policyId: GetPolicyPathParams['policyId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetPolicyQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getPolicySuspenseQueryKey(policyId)

  const query = useSuspenseQuery(
    {
      ...getPolicySuspenseQueryOptions(policyId, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}