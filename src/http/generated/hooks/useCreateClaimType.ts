/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateClaimTypeMutationRequest, CreateClaimTypeMutationResponse } from '../types/CreateClaimType.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const createClaimTypeMutationKey = () => [{ url: '/claim-types' }] as const

export type CreateClaimTypeMutationKey = ReturnType<typeof createClaimTypeMutationKey>

/**
 * @summary Create claim type
 * {@link /claim-types}
 */
export async function createClaimType(
  data: CreateClaimTypeMutationRequest,
  config: Partial<RequestConfig<CreateClaimTypeMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<CreateClaimTypeMutationResponse, ResponseErrorConfig<Error>, CreateClaimTypeMutationRequest>({
    method: 'POST',
    url: `/claim-types`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Create claim type
 * {@link /claim-types}
 */
export function useCreateClaimType<TContext>(
  options: {
    mutation?: UseMutationOptions<CreateClaimTypeMutationResponse, ResponseErrorConfig<Error>, { data: CreateClaimTypeMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<CreateClaimTypeMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createClaimTypeMutationKey()

  return useMutation<CreateClaimTypeMutationResponse, ResponseErrorConfig<Error>, { data: CreateClaimTypeMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return createClaimType(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}