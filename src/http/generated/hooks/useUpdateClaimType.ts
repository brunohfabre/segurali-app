/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { UpdateClaimTypeMutationRequest, UpdateClaimTypeMutationResponse, UpdateClaimTypePathParams } from '../types/UpdateClaimType.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const updateClaimTypeMutationKey = () => [{ url: '/claim-types/:claimTypeId' }] as const

export type UpdateClaimTypeMutationKey = ReturnType<typeof updateClaimTypeMutationKey>

/**
 * @summary Update claim type
 * {@link /claim-types/:claimTypeId}
 */
export async function updateClaimType(
  claimTypeId: UpdateClaimTypePathParams['claimTypeId'],
  data: UpdateClaimTypeMutationRequest,
  config: Partial<RequestConfig<UpdateClaimTypeMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<UpdateClaimTypeMutationResponse, ResponseErrorConfig<Error>, UpdateClaimTypeMutationRequest>({
    method: 'PUT',
    url: `/claim-types/${claimTypeId}`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Update claim type
 * {@link /claim-types/:claimTypeId}
 */
export function useUpdateClaimType<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateClaimTypeMutationResponse,
      ResponseErrorConfig<Error>,
      { claimTypeId: UpdateClaimTypePathParams['claimTypeId']; data: UpdateClaimTypeMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateClaimTypeMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateClaimTypeMutationKey()

  return useMutation<
    UpdateClaimTypeMutationResponse,
    ResponseErrorConfig<Error>,
    { claimTypeId: UpdateClaimTypePathParams['claimTypeId']; data: UpdateClaimTypeMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ claimTypeId, data }) => {
        return updateClaimType(claimTypeId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}