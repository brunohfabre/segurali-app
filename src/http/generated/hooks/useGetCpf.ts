/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetCpfQueryResponse, GetCpfPathParams } from '../types/GetCpf.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getCpfQueryKey = (cpf: GetCpfPathParams['cpf']) => [{ url: '/cpfs/:cpf', params: { cpf: cpf } }] as const

export type GetCpfQueryKey = ReturnType<typeof getCpfQueryKey>

/**
 * @summary Get cpf
 * {@link /cpfs/:cpf}
 */
export async function getCpf(cpf: GetCpfPathParams['cpf'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetCpfQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/cpfs/${cpf}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getCpfQueryOptions(cpf: GetCpfPathParams['cpf'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getCpfQueryKey(cpf)
  return queryOptions<GetCpfQueryResponse, ResponseErrorConfig<Error>, GetCpfQueryResponse, typeof queryKey>({
    enabled: !!cpf,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getCpf(cpf, config)
    },
  })
}

/**
 * @summary Get cpf
 * {@link /cpfs/:cpf}
 */
export function useGetCpf<TData = GetCpfQueryResponse, TQueryData = GetCpfQueryResponse, TQueryKey extends QueryKey = GetCpfQueryKey>(
  cpf: GetCpfPathParams['cpf'],
  options: {
    query?: Partial<QueryObserverOptions<GetCpfQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getCpfQueryKey(cpf)

  const query = useQuery(
    {
      ...getCpfQueryOptions(cpf, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}