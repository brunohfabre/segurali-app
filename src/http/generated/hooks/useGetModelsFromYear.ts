/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetModelsFromYearQueryResponse, GetModelsFromYearPathParams, GetModelsFromYearQueryParams } from '../types/GetModelsFromYear.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getModelsFromYearQueryKey = (brandId: GetModelsFromYearPathParams['brandId'], params: GetModelsFromYearQueryParams) =>
  [{ url: '/brands/:brandId/models-from-year', params: { brandId: brandId } }, ...(params ? [params] : [])] as const

export type GetModelsFromYearQueryKey = ReturnType<typeof getModelsFromYearQueryKey>

/**
 * @summary Get models by brand
 * {@link /brands/:brandId/models-from-year}
 */
export async function getModelsFromYear(
  brandId: GetModelsFromYearPathParams['brandId'],
  params: GetModelsFromYearQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetModelsFromYearQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/brands/${brandId}/models-from-year`,
    baseURL: 'http://localhost:3333',
    params,
    ...requestConfig,
  })
  return res.data
}

export function getModelsFromYearQueryOptions(
  brandId: GetModelsFromYearPathParams['brandId'],
  params: GetModelsFromYearQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getModelsFromYearQueryKey(brandId, params)
  return queryOptions<GetModelsFromYearQueryResponse, ResponseErrorConfig<Error>, GetModelsFromYearQueryResponse, typeof queryKey>({
    enabled: !!(brandId && params),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getModelsFromYear(brandId, params, config)
    },
  })
}

/**
 * @summary Get models by brand
 * {@link /brands/:brandId/models-from-year}
 */
export function useGetModelsFromYear<
  TData = GetModelsFromYearQueryResponse,
  TQueryData = GetModelsFromYearQueryResponse,
  TQueryKey extends QueryKey = GetModelsFromYearQueryKey,
>(
  brandId: GetModelsFromYearPathParams['brandId'],
  params: GetModelsFromYearQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<GetModelsFromYearQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getModelsFromYearQueryKey(brandId, params)

  const query = useQuery(
    {
      ...getModelsFromYearQueryOptions(brandId, params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}