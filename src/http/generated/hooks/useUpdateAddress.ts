/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { UpdateAddressMutationRequest, UpdateAddressMutationResponse, UpdateAddressPathParams } from '../types/UpdateAddress.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const updateAddressMutationKey = () => [{ url: '/addresses/:addressId' }] as const

export type UpdateAddressMutationKey = ReturnType<typeof updateAddressMutationKey>

/**
 * @summary Update address
 * {@link /addresses/:addressId}
 */
export async function updateAddress(
  addressId: UpdateAddressPathParams['addressId'],
  data?: UpdateAddressMutationRequest,
  config: Partial<RequestConfig<UpdateAddressMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<UpdateAddressMutationResponse, ResponseErrorConfig<Error>, UpdateAddressMutationRequest>({
    method: 'PUT',
    url: `/addresses/${addressId}`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Update address
 * {@link /addresses/:addressId}
 */
export function useUpdateAddress<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateAddressMutationResponse,
      ResponseErrorConfig<Error>,
      { addressId: UpdateAddressPathParams['addressId']; data?: UpdateAddressMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateAddressMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateAddressMutationKey()

  return useMutation<
    UpdateAddressMutationResponse,
    ResponseErrorConfig<Error>,
    { addressId: UpdateAddressPathParams['addressId']; data?: UpdateAddressMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ addressId, data }) => {
        return updateAddress(addressId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}