/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { RequestPasswordRecoverMutationRequest, RequestPasswordRecoverMutationResponse } from '../types/RequestPasswordRecover.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const requestPasswordRecoverMutationKey = () => [{ url: '/password/recover' }] as const

export type RequestPasswordRecoverMutationKey = ReturnType<typeof requestPasswordRecoverMutationKey>

/**
 * @summary Request password recover
 * {@link /password/recover}
 */
export async function requestPasswordRecover(
  data: RequestPasswordRecoverMutationRequest,
  config: Partial<RequestConfig<RequestPasswordRecoverMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<RequestPasswordRecoverMutationResponse, ResponseErrorConfig<Error>, RequestPasswordRecoverMutationRequest>({
    method: 'POST',
    url: `/password/recover`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Request password recover
 * {@link /password/recover}
 */
export function useRequestPasswordRecover<TContext>(
  options: {
    mutation?: UseMutationOptions<
      RequestPasswordRecoverMutationResponse,
      ResponseErrorConfig<Error>,
      { data: RequestPasswordRecoverMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<RequestPasswordRecoverMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? requestPasswordRecoverMutationKey()

  return useMutation<RequestPasswordRecoverMutationResponse, ResponseErrorConfig<Error>, { data: RequestPasswordRecoverMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return requestPasswordRecover(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}