/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { UpdatePriceMutationRequest, UpdatePriceMutationResponse, UpdatePricePathParams } from '../types/UpdatePrice.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const updatePriceMutationKey = () => [{ url: '/quotes/:quoteId/prices/:priceId' }] as const

export type UpdatePriceMutationKey = ReturnType<typeof updatePriceMutationKey>

/**
 * @summary Update price
 * {@link /quotes/:quoteId/prices/:priceId}
 */
export async function updatePrice(
  quoteId: UpdatePricePathParams['quoteId'],
  priceId: UpdatePricePathParams['priceId'],
  data: UpdatePriceMutationRequest,
  config: Partial<RequestConfig<UpdatePriceMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<UpdatePriceMutationResponse, ResponseErrorConfig<Error>, UpdatePriceMutationRequest>({
    method: 'PATCH',
    url: `/quotes/${quoteId}/prices/${priceId}`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Update price
 * {@link /quotes/:quoteId/prices/:priceId}
 */
export function useUpdatePrice<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdatePriceMutationResponse,
      ResponseErrorConfig<Error>,
      { quoteId: UpdatePricePathParams['quoteId']; priceId: UpdatePricePathParams['priceId']; data: UpdatePriceMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdatePriceMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updatePriceMutationKey()

  return useMutation<
    UpdatePriceMutationResponse,
    ResponseErrorConfig<Error>,
    { quoteId: UpdatePricePathParams['quoteId']; priceId: UpdatePricePathParams['priceId']; data: UpdatePriceMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ quoteId, priceId, data }) => {
        return updatePrice(quoteId, priceId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}