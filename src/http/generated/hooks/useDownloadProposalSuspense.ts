/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { DownloadProposalQueryResponse, DownloadProposalPathParams } from '../types/DownloadProposal.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const downloadProposalSuspenseQueryKey = (proposalId: DownloadProposalPathParams['proposalId']) =>
  [{ url: '/proposals/:proposalId/download', params: { proposalId: proposalId } }] as const

export type DownloadProposalSuspenseQueryKey = ReturnType<typeof downloadProposalSuspenseQueryKey>

/**
 * @summary Download proposal
 * {@link /proposals/:proposalId/download}
 */
export async function downloadProposalSuspense(
  proposalId: DownloadProposalPathParams['proposalId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DownloadProposalQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/proposals/${proposalId}/download`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function downloadProposalSuspenseQueryOptions(
  proposalId: DownloadProposalPathParams['proposalId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = downloadProposalSuspenseQueryKey(proposalId)
  return queryOptions<DownloadProposalQueryResponse, ResponseErrorConfig<Error>, DownloadProposalQueryResponse, typeof queryKey>({
    enabled: !!proposalId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return downloadProposalSuspense(proposalId, config)
    },
  })
}

/**
 * @summary Download proposal
 * {@link /proposals/:proposalId/download}
 */
export function useDownloadProposalSuspense<TData = DownloadProposalQueryResponse, TQueryKey extends QueryKey = DownloadProposalSuspenseQueryKey>(
  proposalId: DownloadProposalPathParams['proposalId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<DownloadProposalQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? downloadProposalSuspenseQueryKey(proposalId)

  const query = useSuspenseQuery(
    {
      ...downloadProposalSuspenseQueryOptions(proposalId, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}