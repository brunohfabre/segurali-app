/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { AuthenticateWithPasswordMutationRequest, AuthenticateWithPasswordMutationResponse } from '../types/AuthenticateWithPassword.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const authenticateWithPasswordMutationKey = () => [{ url: '/auth/email' }] as const

export type AuthenticateWithPasswordMutationKey = ReturnType<typeof authenticateWithPasswordMutationKey>

/**
 * @summary Authenticate with email and password
 * {@link /auth/email}
 */
export async function authenticateWithPassword(
  data: AuthenticateWithPasswordMutationRequest,
  config: Partial<RequestConfig<AuthenticateWithPasswordMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<AuthenticateWithPasswordMutationResponse, ResponseErrorConfig<Error>, AuthenticateWithPasswordMutationRequest>({
    method: 'POST',
    url: `/auth/email`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Authenticate with email and password
 * {@link /auth/email}
 */
export function useAuthenticateWithPassword<TContext>(
  options: {
    mutation?: UseMutationOptions<
      AuthenticateWithPasswordMutationResponse,
      ResponseErrorConfig<Error>,
      { data: AuthenticateWithPasswordMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<AuthenticateWithPasswordMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? authenticateWithPasswordMutationKey()

  return useMutation<AuthenticateWithPasswordMutationResponse, ResponseErrorConfig<Error>, { data: AuthenticateWithPasswordMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return authenticateWithPassword(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}