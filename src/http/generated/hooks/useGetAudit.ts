/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetAuditQueryResponse, GetAuditPathParams } from '../types/GetAudit.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getAuditQueryKey = (auditId: GetAuditPathParams['auditId']) => [{ url: '/dev/audits/:auditId', params: { auditId: auditId } }] as const

export type GetAuditQueryKey = ReturnType<typeof getAuditQueryKey>

/**
 * @summary Get audit
 * {@link /dev/audits/:auditId}
 */
export async function getAudit(auditId: GetAuditPathParams['auditId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetAuditQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/dev/audits/${auditId}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getAuditQueryOptions(auditId: GetAuditPathParams['auditId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getAuditQueryKey(auditId)
  return queryOptions<GetAuditQueryResponse, ResponseErrorConfig<Error>, GetAuditQueryResponse, typeof queryKey>({
    enabled: !!auditId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getAudit(auditId, config)
    },
  })
}

/**
 * @summary Get audit
 * {@link /dev/audits/:auditId}
 */
export function useGetAudit<TData = GetAuditQueryResponse, TQueryData = GetAuditQueryResponse, TQueryKey extends QueryKey = GetAuditQueryKey>(
  auditId: GetAuditPathParams['auditId'],
  options: {
    query?: Partial<QueryObserverOptions<GetAuditQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getAuditQueryKey(auditId)

  const query = useQuery(
    {
      ...getAuditQueryOptions(auditId, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}