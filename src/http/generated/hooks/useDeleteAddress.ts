/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { DeleteAddressMutationResponse, DeleteAddressPathParams } from '../types/DeleteAddress.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteAddressMutationKey = () => [{ url: '/addresses/:addressId' }] as const

export type DeleteAddressMutationKey = ReturnType<typeof deleteAddressMutationKey>

/**
 * @summary Delete address
 * {@link /addresses/:addressId}
 */
export async function deleteAddress(addressId: DeleteAddressPathParams['addressId'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DeleteAddressMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/addresses/${addressId}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Delete address
 * {@link /addresses/:addressId}
 */
export function useDeleteAddress<TContext>(
  options: {
    mutation?: UseMutationOptions<DeleteAddressMutationResponse, ResponseErrorConfig<Error>, { addressId: DeleteAddressPathParams['addressId'] }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteAddressMutationKey()

  return useMutation<DeleteAddressMutationResponse, ResponseErrorConfig<Error>, { addressId: DeleteAddressPathParams['addressId'] }, TContext>(
    {
      mutationFn: async ({ addressId }) => {
        return deleteAddress(addressId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}