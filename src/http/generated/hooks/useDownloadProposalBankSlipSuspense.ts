/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { DownloadProposalBankSlipQueryResponse, DownloadProposalBankSlipPathParams } from '../types/DownloadProposalBankSlip.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const downloadProposalBankSlipSuspenseQueryKey = (proposalId: DownloadProposalBankSlipPathParams['proposalId']) =>
  [{ url: '/proposals/:proposalId/bank-slip/download', params: { proposalId: proposalId } }] as const

export type DownloadProposalBankSlipSuspenseQueryKey = ReturnType<typeof downloadProposalBankSlipSuspenseQueryKey>

/**
 * @summary Download proposal bank slip
 * {@link /proposals/:proposalId/bank-slip/download}
 */
export async function downloadProposalBankSlipSuspense(
  proposalId: DownloadProposalBankSlipPathParams['proposalId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DownloadProposalBankSlipQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/proposals/${proposalId}/bank-slip/download`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function downloadProposalBankSlipSuspenseQueryOptions(
  proposalId: DownloadProposalBankSlipPathParams['proposalId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = downloadProposalBankSlipSuspenseQueryKey(proposalId)
  return queryOptions<DownloadProposalBankSlipQueryResponse, ResponseErrorConfig<Error>, DownloadProposalBankSlipQueryResponse, typeof queryKey>({
    enabled: !!proposalId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return downloadProposalBankSlipSuspense(proposalId, config)
    },
  })
}

/**
 * @summary Download proposal bank slip
 * {@link /proposals/:proposalId/bank-slip/download}
 */
export function useDownloadProposalBankSlipSuspense<
  TData = DownloadProposalBankSlipQueryResponse,
  TQueryKey extends QueryKey = DownloadProposalBankSlipSuspenseQueryKey,
>(
  proposalId: DownloadProposalBankSlipPathParams['proposalId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<DownloadProposalBankSlipQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? downloadProposalBankSlipSuspenseQueryKey(proposalId)

  const query = useSuspenseQuery(
    {
      ...downloadProposalBankSlipSuspenseQueryOptions(proposalId, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}