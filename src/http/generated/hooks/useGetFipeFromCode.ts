/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetFipeFromCodeQueryResponse, GetFipeFromCodePathParams, GetFipeFromCodeQueryParams } from '../types/GetFipeFromCode.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getFipeFromCodeQueryKey = (fipeCode: GetFipeFromCodePathParams['fipeCode'], params: GetFipeFromCodeQueryParams) =>
  [{ url: '/fipe/:fipeCode', params: { fipeCode: fipeCode } }, ...(params ? [params] : [])] as const

export type GetFipeFromCodeQueryKey = ReturnType<typeof getFipeFromCodeQueryKey>

/**
 * @summary Get fipe from code
 * {@link /fipe/:fipeCode}
 */
export async function getFipeFromCode(
  fipeCode: GetFipeFromCodePathParams['fipeCode'],
  params: GetFipeFromCodeQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetFipeFromCodeQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/fipe/${fipeCode}`,
    baseURL: 'http://localhost:3333',
    params,
    ...requestConfig,
  })
  return res.data
}

export function getFipeFromCodeQueryOptions(
  fipeCode: GetFipeFromCodePathParams['fipeCode'],
  params: GetFipeFromCodeQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getFipeFromCodeQueryKey(fipeCode, params)
  return queryOptions<GetFipeFromCodeQueryResponse, ResponseErrorConfig<Error>, GetFipeFromCodeQueryResponse, typeof queryKey>({
    enabled: !!(fipeCode && params),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getFipeFromCode(fipeCode, params, config)
    },
  })
}

/**
 * @summary Get fipe from code
 * {@link /fipe/:fipeCode}
 */
export function useGetFipeFromCode<
  TData = GetFipeFromCodeQueryResponse,
  TQueryData = GetFipeFromCodeQueryResponse,
  TQueryKey extends QueryKey = GetFipeFromCodeQueryKey,
>(
  fipeCode: GetFipeFromCodePathParams['fipeCode'],
  params: GetFipeFromCodeQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<GetFipeFromCodeQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getFipeFromCodeQueryKey(fipeCode, params)

  const query = useQuery(
    {
      ...getFipeFromCodeQueryOptions(fipeCode, params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}