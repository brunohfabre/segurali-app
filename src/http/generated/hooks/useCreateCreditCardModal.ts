/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateCreditCardModalMutationResponse, CreateCreditCardModalPathParams } from '../types/CreateCreditCardModal.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const createCreditCardModalMutationKey = () => [{ url: '/quotes/:quoteId/prices/:priceId/modal' }] as const

export type CreateCreditCardModalMutationKey = ReturnType<typeof createCreditCardModalMutationKey>

/**
 * @summary Create credit card modal
 * {@link /quotes/:quoteId/prices/:priceId/modal}
 */
export async function createCreditCardModal(
  quoteId: CreateCreditCardModalPathParams['quoteId'],
  priceId: CreateCreditCardModalPathParams['priceId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<CreateCreditCardModalMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/quotes/${quoteId}/prices/${priceId}/modal`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Create credit card modal
 * {@link /quotes/:quoteId/prices/:priceId/modal}
 */
export function useCreateCreditCardModal<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateCreditCardModalMutationResponse,
      ResponseErrorConfig<Error>,
      { quoteId: CreateCreditCardModalPathParams['quoteId']; priceId: CreateCreditCardModalPathParams['priceId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createCreditCardModalMutationKey()

  return useMutation<
    CreateCreditCardModalMutationResponse,
    ResponseErrorConfig<Error>,
    { quoteId: CreateCreditCardModalPathParams['quoteId']; priceId: CreateCreditCardModalPathParams['priceId'] },
    TContext
  >(
    {
      mutationFn: async ({ quoteId, priceId }) => {
        return createCreditCardModal(quoteId, priceId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}