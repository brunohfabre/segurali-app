/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetUserFromCpfQueryResponse, GetUserFromCpfPathParams } from '../types/GetUserFromCpf.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getUserFromCpfSuspenseQueryKey = (cpf: GetUserFromCpfPathParams['cpf']) => [{ url: '/users/cpf/:cpf', params: { cpf: cpf } }] as const

export type GetUserFromCpfSuspenseQueryKey = ReturnType<typeof getUserFromCpfSuspenseQueryKey>

/**
 * @summary Get user from cpf
 * {@link /users/cpf/:cpf}
 */
export async function getUserFromCpfSuspense(cpf: GetUserFromCpfPathParams['cpf'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetUserFromCpfQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/users/cpf/${cpf}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getUserFromCpfSuspenseQueryOptions(cpf: GetUserFromCpfPathParams['cpf'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getUserFromCpfSuspenseQueryKey(cpf)
  return queryOptions<GetUserFromCpfQueryResponse, ResponseErrorConfig<Error>, GetUserFromCpfQueryResponse, typeof queryKey>({
    enabled: !!cpf,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUserFromCpfSuspense(cpf, config)
    },
  })
}

/**
 * @summary Get user from cpf
 * {@link /users/cpf/:cpf}
 */
export function useGetUserFromCpfSuspense<TData = GetUserFromCpfQueryResponse, TQueryKey extends QueryKey = GetUserFromCpfSuspenseQueryKey>(
  cpf: GetUserFromCpfPathParams['cpf'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetUserFromCpfQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getUserFromCpfSuspenseQueryKey(cpf)

  const query = useSuspenseQuery(
    {
      ...getUserFromCpfSuspenseQueryOptions(cpf, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}